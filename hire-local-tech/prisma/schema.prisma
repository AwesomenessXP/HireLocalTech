generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================
// Core Models
// ========================

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  name       String?
  role       Role
  created_at DateTime @default(now())

  // Optional: Relationships to other models
  profile    Profile?
  jobs       Job[]    @relation("UserJobs")
  applications JobApplication[] @relation("UserApplications")
  resumes    Resume[] @relation("UserResumes")
  sessions   Session[] @relation("UserSessions")
  savedJobs   SavedJob[] @relation("UserSavedJobs")

  @@map("users")
}

model Profile {
  userId         String   @id
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Shared fields
  bio            String?
  location       String?
  avatar_url     String?
  updated_at     DateTime @default(now())

  // Job seeker fields
  experience_level ExperienceLevel?
  skills           String[] @default([])
  portfolio_url    String?
  resume_url       String?

  // Job poster fields
  is_employer      Boolean  @default(false)
  company_name     String?
  company_website  String?

  @@map("profiles")
}

// ========================
// Job Related Models
// ========================

model Job {
  id              String    @id @default(uuid())
  url             String?    @unique
  slug            String    @unique
  title           String
  company         String
  description     String
  long_description String
  employment_type EmploymentType
  remote          Remote
  experience_level ExperienceLevel
  logo_url        String?
  location        String
  applicants      Int       @default(0)
  created_at      DateTime  @default(now())

  salary_min      Float
  salary_max      Float
  categories      Category[]
  education_type  EducationType[]

  // Optional: link to a user/poster
  postedById      String?   // foreign key pointing to User.id
  postedBy        User?     @relation("UserJobs", fields: [postedById], references: [id])
  applications    JobApplication[] @relation("JobApplications")
  savedJobs       SavedJob[] @relation("JobsSaved")
  
  @@map("jobs")
}

model JobApplication {
  id         String           @id @default(uuid())
  jobId      String
  seekerId   String
  resumeUrl  String?
  createdAt  DateTime         @default(now())
  status     ApplicationStatus @default(PENDING)

  // Relations
  job      Job  @relation("JobApplications", fields: [jobId], references: [id])
  seeker   User @relation("UserApplications", fields: [seekerId], references: [id])

  @@map("job_applications")
}

// ========================
// Resume & Session Models
// ========================

model Resume {
  id         String   @id @default(uuid())
  seekerId   String
  fileUrl    String
  fileName   String?
  uploadedAt DateTime @default(now())

  @@unique([seekerId])
  seeker     User     @relation("UserResumes", fields: [seekerId], references: [id], onDelete: Cascade)

  @@map("resumes")
}

model Session {
  id         String   @id @default(uuid())
  userId     String
  token      String   @unique
  createdAt  DateTime @default(now())
  expiresAt  DateTime?

  user       User     @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// ========================
// Saved Jobs Model
// ========================

model SavedJob {
  id        String   @id @default(uuid())
  seekerId  String
  jobId     String
  savedAt   DateTime @default(now())

  seeker    User  @relation("UserSavedJobs", fields: [seekerId], references: [id], onDelete: Cascade)
  job       Job   @relation("JobsSaved", fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([seekerId, jobId])
  @@map("saved_jobs")
}

// ========================
// Enums
// ========================

enum Role {
  SEEKER @map("SEEKER")
  POSTER @map("POSTER")
}

enum ExperienceLevel {
  JUNIOR @map("Junior")
  MID_LEVEL @map("Mid-Level")
  SENIOR @map("Senior")
  LEAD @map("Lead")
}

enum EmploymentType {
  FULL_TIME @map("Full-Time")
  PART_TIME @map("Part-Time")
  CONTRACT @map("Contract")
  INTERNSHIP @map("Internship")
  PROJECT_BASED @map("Project-Based")
}

enum Remote {
  ON_SITE @map("On-Site")
  HYBRID @map("Hybrid")
  REMOTE @map("Remote")
}

enum ApplicationStatus {
  PENDING
  VIEWED
  REJECTED
  ACCEPTED
}

enum Category {
  SOFTWARE @map("Software")
  IT_SUPPORT @map("IT Support")
  SYSADMIN @map("Sysadmin")
  DATA_ANALYTICS @map("Data Analytics")
  CRM @map("CRM")
}

enum EducationType {
  NO_DEGREE @map("No degree")
  ASSOCIATES @map("Associate")
  BACHELORS @map("Bachelor")
  MASTERS @map("Master")
  DOCTORATE @map("Doctorate")
}